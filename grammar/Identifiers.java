// This code generates IDENTIFIER_START/IDENTIFIER_PART fragments based on the Java language definition of what
// characters are allowed in identifier names.

import java.util.HashSet;
import java.util.Set;

public class Identifiers {

    @FunctionalInterface
    interface CharPredicate {
        boolean accept(char c);
    }

    public static void main(String... args) {
        System.out.println("/* ---- Lexer fragments for Java identifier characters ----");
        System.out.println("   Auto-generated by Identifiers.java because ain't nobody got time for this! */");
        System.out.println();
        System.out.println("lexer grammar JavaIdentifierCharacters;\n");
        System.out.println("fragment IDENTIFIER_START");

        Set<Character> accepted = new HashSet<>();
        CharPredicate idStartPredicate = c -> {
            if (Character.isJavaIdentifierStart(c)) {
                accepted.add(c);
                return true;
            } else
                return false;
        };

        printCharacters(idStartPredicate);
        System.out.println("    ; // " + accepted.size() + " characters total");


        CharPredicate idPartPredicate = c -> {
            return Character.isJavaIdentifierPart(c)
                && !accepted.contains(c);
        };
        System.out.println("\nfragment IDENTIFIER_PART");
        printCharacters(idPartPredicate);
        System.out.println("    | IDENTIFIER_START");
        System.out.println("    ;");
    }

    private static void printCharacters(CharPredicate predicate) {
        boolean accepting = false;
        char delim = ':';
        char start = '\0';
        for (char c = '\u0024'; c != '\u0000'; ++c) {
            boolean cAccepting = predicate.accept(c);
            if (accepting == cAccepting)
                continue;
            else if (cAccepting)
                start = c;
            else {
                if (start + 1 == c)
                    System.out.printf("    %c '\\u%04x'              // '%c'\n",
                            delim, (int)start, start);
                else
                    System.out.printf("    %c '\\u%04x'..'\\u%04x'    // '%c'..'%c' (%d characters)\n",
                            delim, (int)start, (int)c - 1, start, c - 1, (int)c - start);
                delim = '|';
            }
            accepting = cAccepting;
        }
    }
}
